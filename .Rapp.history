library(popbio)
help(lambda)
summary(hudsonia)
data(hudsonia)
summary(hudsonia)
sapply(hudsonia, lambda)
data(grizzly)
grizzly
hudsonia
calathea
data(calathea)
calathea
calathea[-17]
par(mfrow=c(3,3), mar=c(1,1,1,1))
for (i in 1:9) hist(rt(100,2), xlab="", ylab="", main="")
for (i in 1:9) hist(rcauchy(1000), xlab="", ylab="", main="")
help(rcauchy)
for (i in 1:9) hist(rt(1000, 1), xlab="", ylab="", main="")
for (i in 1:9) density(rt(1000, 1), xlab="", ylab="", main="")
help(density)
for (i in 1:9) hist(rt(100, 1), xlab="", ylab="", main="")
par(mfrow=c(1,1))
for (i in 1:9) hist(rt(100, 1), xlab="", ylab="", main="")
library(ggplot2)
help(rep)
rep(1:9, 100)
replicate <- rep(1, 100)
for (i in 2:9) replicate <- c(replicate, rep(i, 100))
replicate <- sort(rep(1:9, 100))
replicate
replicate <- rep(1:9, 100)
sample <- rt(length(replicate), 1)
df <- data.frame(replicate=as.factor(replicate), sample=sample)
p <- ggplot(df, aes(x=sample)) + geom_histogram() + facet_wrap(~ replicate)
print(p)
sample <- rt(length(replicate), 2)
df <- data.frame(replicate=as.factor(replicate), sample=sample)
ggplot(df, aes(x=sample)) + geom_histogram() + facet_wrap(~ replicate)
sample <- rt(length(replicate), 1)
ggplot(df, aes(x=sample)) + geom_histogram() + facet_wrap(~ replicate)
df <- data.frame(replicate=as.factor(replicate), sample=sample)
ggplot(df, aes(x=sample)) + geom_histogram() + facet_wrap(~ replicate)
sample <- rt(length(replicate), 2)
ggplot(df, aes(x=sample)) + geom_histogram() + facet_wrap(~ replicate)
sample <- rt(length(replicate), 2)
df <- data.frame(replicate=as.factor(replicate), sample=sample)
ggplot(df, aes(x=sample)) + geom_histogram() + facet_wrap(~ replicate)
sample <- rt(length(replicate), 1)
ggplot(df, aes(x=sample)) + geom_histogram() + facet_wrap(~ replicate)
sample <- rt(length(replicate), 1)
df <- data.frame(replicate=as.factor(replicate), sample=sample)
ggplot(df, aes(x=sample)) + geom_histogram() + facet_wrap(~ replicate)
sample <- rt(length(replicate), 2)
df <- data.frame(replicate=as.factor(replicate), sample=sample)
ggplot(df, aes(x=sample)) + geom_histogram() + facet_wrap(~ replicate)
sample <- rnorm(length(replicate), 2)
df <- data.frame(replicate=as.factor(replicate), sample=sample)
sample <- rnorm(length(replicate), 2)
df <- data.frame(replicate=as.factor(replicate), sample=sample)
ggplot(df, aes(x=sample)) + geom_histogram() + facet_wrap(~ replicate)
Two species in a Beverton-Holt competition model on a 2-d landscape#
###################
###Parameters#
years=15#
scape=100#
#species GR#
Sp1=50#
Sp2=40#
#landscape#
sp1_land<-array(runif(scape*scape,70,90),c(scape,scape,(years+1)))#
sp2_land<-array(runif(scape*scape,70,90),c(scape,scape,(years+1)))#
y1<-matrix(c(rep(c(rep(0.4,40),rep(0.70,20),c(rep(0.4,40))),40),rep(0.7,20*scape),rep(c(rep(0.4,40),rep(0.7,20),c(rep(0.4,40))),40)),ncol=scape,nrow=scape)#
y2<-1-y1#
res<-matrix((sp2_land[,,1]-sp1_land[,,1]),scape,scape)#
###Functions#
colrs<-colorRampPalette(sample(c("darkred","green3"),2,replace=FALSE))#
bevertonholt2sp<-function(years,scape,sp1_land,sp2_land,res){#
for(i in 1:years){#
for(j in 1:scape){#
for(k in 1:scape){#
N1<-sp1_land[j,k,i]#
N2<-sp2_land[j,k,i]#
#growth rates#
dN1<-N1*rnorm(1,Sp1,0.015)/(1+(y1[j,k]*N2+N1))#
dN2<-N2*rnorm(1,Sp2,0.015)/(1+(y2[j,k]*N1+N2))#
#update pop sizes#
sp1_land[j,k,i+1]<-N1+dN1#
sp2_land[j,k,i+1]<-N2+dN2#
#pop size differences#
res[j,k]<-(sp2_land[j,k,i+1]-sp1_land[j,k,i+1])#
}#
}#
image(res,col=colrs(6),xaxt="n",yaxt="n",add=TRUE)#
}#
}#
par(bg="wheat1",bty="n",pty="m",ps=15)#
image(res,col=colrs(6),xaxt="n",yaxt="n",lty="blank")#
bevertonholt2sp(years,scape,sp1_land,sp2_land,res)#
polygon(x=c(0.04,0.15,0.37,0.36,0.25,0.04),y=c(0.75,0.98,0.85,0.68,0.61,0.75),col="oldlace",border="darkgrey")#
lines(x=c(0.36,0.4),y=c(0.68,0.6),lwd=0.75,col="brown3")#
text(x=0.21,y=0.8,"Happy\n Holidays\n from the\n EEB & Flow",cex=1,col=colrs(6)[6],font=4,srt=-30)
0.95^100
0.95^50
library(rstan)
set_cppo("fast")
detach("package:rstan", unload=TRUE)
remove.packages("rstan")
options(repos = c(getOption("repos"), rstan = "http://wiki.rstan-repo.googlecode.com/git/"))#
install.packages('rstan', type = 'source')
help(knit)
library(knitr)
help(knit)
x <- 2206/1202
x
x^(1/10)
x <- 20159.3/16557.44
x^(1/10)
1368+468+26+84+110+150
1.27^(1/10)
x <- 154962; for (i in 1:4) {}
x <- 154962; for (i in 1:4) {
x <- x*1.05
cat(i, x, "\n")
}
set_cppo('fast')
library(rstan)
Sys.getenv("HOME")
options(repos=c(getOption("repos"), rstan="http://wiki.rstan-repo.googlecode.com/git/"))
install.packages("rstan", type="source")
3/12
install.packages("inline")
install.packages("Rcpp")
options(repos = c(getOption("repos"), rstan = "http://wiki.rstan-repo.googlecode.com/git/"))
install.packages('rstan', type = 'source')
Sys.setenv(MAKEFLAGS = "-j4")
install_rstan <- function() {#
  on.exit(Sys.unsetenv("R_MAKEVARS_USER"))#
  on.exit(Sys.unsetenv("R_MAKEVARS_SITE"), add = TRUE)#
#
  try(remove.packages("rstan"), silent = TRUE)#
  Sys.setenv(R_MAKEVARS_USER = "foobar")#
  Sys.setenv(R_MAKEVARS_SITE = "foobar")#
  options(repos = c(getOption("repos"), #
          rstan = "http://wiki.rstan-repo.googlecode.com/git/"))#
  install.packages(c("inline", "Rcpp"))#
  install.packages("rstan", type = 'source')#
  library(rstan)#
  set_cppo("fast")#
  if (any(grepl("^darwin", R.version$os, ignore.case = TRUE))) {#
    system("echo 'CC=clang' >> ~/.R/Makevars")#
    system("echo 'CXX=clang++ -stdlib=libstdc++' >> ~/.R/Makevars")#
  }#
  return(invisible(NULL))#
}#
install_rstan()
remove.packages("rstan")
install.packages("inline")
install.packages('inline')
install.packages('Rcpp')
# using library inline to compile a C++ code on the fly#
library(inline) #
library(Rcpp)#
src <- ' #
  std::vector<std::string> s; #
  s.push_back("hello");#
  s.push_back("world");#
  return Rcpp::wrap(s);#
'#
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = FALSE)#
cat(hellofun(), '\n')
set_cppo('fast')
library(rstan)
if (!file.exists("~/.R/Makevars")) {#
  cat('CXX=g++ -arch x86_64 -ftemplate-depth-256 -stdlib=libstdc++\n#
       CXXFLAGS="-mtune=native  -O3 -Wall -pedantic -Wconversion"\n', #
       file="~/.R/Makevars");#
} else {#
   file.show("~/.R/Makevars");#
}
options(repos = c(getOption("repos"), rstan = "http://wiki.rstan-repo.googlecode.com/git/"))#
install.packages('rstan', type = 'source')
Sys.getenv("R_MAKEVARS_SITE")
library(inline) #
library(Rcpp)#
src <- ' #
  std::vector<std::string> s; #
  s.push_back("hello");#
  s.push_back("world");#
  return Rcpp::wrap(s);#
'#
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = TRUE)
hellofun
hellofun()
help(install.packages)
install.packages('Rcpp', type="source")
schools_code <- '#
  data {#
    int<lower=0> J; // number of schools #
    real y[J]; // estimated treatment effects#
    real<lower=0> sigma[J]; // s.e. of effect estimates #
  }#
  parameters {#
    real mu; #
    real<lower=0> tau;#
    real eta[J];#
  }#
  transformed parameters {#
    real theta[J];#
    for (j in 1:J)#
      theta[j] <- mu + tau * eta[j];#
  }#
  model {#
    eta ~ normal(0, 1);#
    y ~ normal(theta, sigma);#
  }#
'#
#
schools_dat <- list(J = 8, #
                    y = c(28,  8, -3,  7, -1,  1, 18, 12),#
                    sigma = c(15, 10, 16, 11,  9, 11, 10, 18))#
#
fit <- stan(model_code = schools_code, data = schools_dat, #
            iter = 1000, chains = 4)
library(rstan)
set_cppo('fast')
schools_code <- '#
  data {#
    int<lower=0> J; // number of schools #
    real y[J]; // estimated treatment effects#
    real<lower=0> sigma[J]; // s.e. of effect estimates #
  }#
  parameters {#
    real mu; #
    real<lower=0> tau;#
    real eta[J];#
  }#
  transformed parameters {#
    real theta[J];#
    for (j in 1:J)#
      theta[j] <- mu + tau * eta[j];#
  }#
  model {#
    eta ~ normal(0, 1);#
    y ~ normal(theta, sigma);#
  }#
'#
#
schools_dat <- list(J = 8, #
                    y = c(28,  8, -3,  7, -1,  1, 18, 12),#
                    sigma = c(15, 10, 16, 11,  9, 11, 10, 18))#
#
fit <- stan(model_code = schools_code, data = schools_dat, #
            iter = 1000, chains = 4)
install.packages("Relate")
help(install.packages)
install.packages("Relate", repos="~/Desktop")
install.packages("~/Desktop/Relate_0.993.tar.gz", repos=NULL, type="source")
x <- matrix(nrow=2, ncol=2, data=c(107,555,130,524))
x
chisq.test(x)
fisher.test(x)
library(adegenet)
help(adegenet)
help(dudi.pca)
library(adegenet)
help(adegenet)
install.packages("MCMCglmm")
install.packages("car")
install.packages("ape")
help(monitor)
require(rstan)
help(monitor)
pi.l <- 0.065
theta.l <- 0.046
alpha <- ((1-theta.l)/theta.l)*pi.l
beta <- ((1-theta.l)/theta.l)*(1.0-pi.l)
x <- seq(0, 1, by=0.001)
help(pbeta)
y <- dbeta(x, alpha, beta)
plot(x, y, typ="l")
x <- seq(0, 0.3, by=0.001)
y <- dbeta(x, alpha, beta)
plot(x, y, typ="l")
help(pbeta)
qbeta(0.15, alpha, beta)
qbeta(0.1, alpha, beta)
qbeta(0.04, alpha, beta)
pbeta(0.04, alpha, beta)
pbeta(0.1, alpha, beta)
pbeta(0.15, alpha, beta)
qbeta(0.95, alpha, beta)
1 - log(0.05)/1000
- log(0.05)/1000
(1-0.997)^1000
0.997^1000
0.996^1000
1500/60
250*20
250*20/60
2*3*10
80*25
install.packages("mvtnorm")
require(R2jags)#
require(mvtnorm)#
rm(list=ls())#
debug <- FALSE#
plot <- TRUE#
print <- TRUE#
report.DIC <- TRUE#
gamma.rate.resid <- 1.0#
gamma.shape.resid <- 1.0#
gamma.rate.species <- 1.0#
gamma.shape.species <-  1.0#
beta.par <- 6#
max.r <- 0.5#
model.file="traits-environment.txt"#
if (debug) {#
  n.chains <- 1#
  n.burnin <- 500#
  n.iter <- 1000#
  n.thin <- 1#
  ## to allow replication of results across runs in JAGS#
  ###
  set.seed(1)#
} else {#
  n.chains <- 5#
  n.burnin <- 5000#
  n.iter <- 25000#
  n.thin <- 25#
}#
standardize <- function(x) {#
  if (is.numeric(x)) {#
    y <- (x - mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
  } else {#
    y <- x#
  }#
  y#
}#
get.mean.vector <- function(x) {#
  x.mean <- apply(x, 1, mean, na.rm=TRUE)#
}#
drop.levels <- function(dat) {#
  dat[] <- lapply(dat, function(x) x[,drop=TRUE])#
  return(dat)#
}#
likelihood <- function(y, mu, Sigma) {#
  llike <- 0.0#
  for (i in 1:nrow(y)) {#
    llike <- llike + dmvnorm(y[i,], mu[i,], Sigma[,], log=TRUE)#
  }#
  llike#
}#
Dbar <- function(y, mu, Sigma) {#
  dbar <- numeric(0)#
  n.rep <- dim(mu)[1]#
  for (i in 1:n.rep) {#
    if ((i %% 10) == 0) {#
      cat(".", sep="")#
      flush.console()#
    }#
    if ((i %% 500) == 0) {#
      cat(i, "\n")#
      flush.console()#
    }#
    dbar[i] <- -2.0*likelihood(y, mu[i,,], Sigma[i,,])#
  }#
  mean(dbar)#
}#
Dhat <- function(y, mu.mean, Sigma.mean) {#
  -2.0*likelihood(y, mu.mean, Sigma.mean)#
}#
## read in appropriate data set#
###
combined <- read.csv("combined.csv", na.strings=".", header=TRUE)#
## prepare the data for JAGS#
###
## 1. pull the relevant data into columns#
###
species <- combined$species#
species#
head(combined)#
sla <- combined$SLA#
area <- combined$Leaf_area#
sd <- combined$SD#
lwr <- combined$LWratio#
spi <- combined$SPI#
map <- combined$MAP#
mat <- combined$MAT#
ratio <- combined$ratio#
## 3. pull the vectors back out and standardize for JAGS#
###
species <- as.numeric(combined$species)#
sla <- standardize(combined$SLA)#
area <- standardize(combined$Leaf_area)#
sd <- standardize(combined$SD)#
lwr <- standardize(combined$Lwratio)#
spi <- standardize(combined$SPI)#
map <- standardize(combined$MAP)#
mat <- standardize(combined$MAT)#
ratio <- standardize(combined$ratio)#
n.samp <- nrow(combined)#
n.species <- max(species)#
n.dim <- 5#
n.species.dim <- n.species*n.dim
require(lme4)
install.packages("lme4")
require(lme4)
sla.lmer <- lmer(sla ~ map + mat + ratio + (1|species))
summary(sla.lmer)
help(lmer)
methods(class="merMod")
plot(sla.lmer)
residuals(sla.lmer)
methods(class="merMod")
resid <- sla - fitted(sla.lmer)
plot(sla, resid)
resid - residual(sla.lmer)
resid - residuals(sla.lmer)
plot(sla, residuals(sla.lmer))
plot(fitted(sla.lmer), residuals(sla.lmer))
plot(sla.lmer)
plot(sla, fitted(sla.lmer))
source("traits-environment.R")
help(max)
source("traits-environment.R")
species
source("traits-environment.R")
species
require(R2jags)#
require(mvtnorm)#
rm(list=ls())#
debug <- FALSE#
plot <- TRUE#
print <- TRUE#
report.DIC <- TRUE#
gamma.rate.resid <- 1.0#
gamma.shape.resid <- 1.0#
gamma.rate.species <- 1.0#
gamma.shape.species <-  1.0#
beta.par <- 6#
max.r <- 0.5#
model.file="traits-environment.txt"#
if (debug) {#
  n.chains <- 1#
  n.burnin <- 500#
  n.iter <- 1000#
  n.thin <- 1#
  ## to allow replication of results across runs in JAGS#
  ###
  set.seed(1)#
} else {#
  n.chains <- 5#
  n.burnin <- 5000#
  n.iter <- 25000#
  n.thin <- 25#
}#
standardize <- function(x) {#
  if (is.numeric(x)) {#
    y <- (x - mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
  } else {#
    y <- x#
  }#
  y#
}#
get.mean.vector <- function(x) {#
  x.mean <- apply(x, 1, mean, na.rm=TRUE)#
}#
drop.levels <- function(dat) {#
  dat[] <- lapply(dat, function(x) x[,drop=TRUE])#
  return(dat)#
}#
likelihood <- function(y, mu, Sigma) {#
  llike <- 0.0#
  for (i in 1:nrow(y)) {#
    llike <- llike + dmvnorm(y[i,], mu[i,], Sigma[,], log=TRUE)#
  }#
  llike#
}#
Dbar <- function(y, mu, Sigma) {#
  dbar <- numeric(0)#
  n.rep <- dim(mu)[1]#
  for (i in 1:n.rep) {#
    if ((i %% 10) == 0) {#
      cat(".", sep="")#
      flush.console()#
    }#
    if ((i %% 500) == 0) {#
      cat(i, "\n")#
      flush.console()#
    }#
    dbar[i] <- -2.0*likelihood(y, mu[i,,], Sigma[i,,])#
  }#
  mean(dbar)#
}#
Dhat <- function(y, mu.mean, Sigma.mean) {#
  -2.0*likelihood(y, mu.mean, Sigma.mean)#
}#
## read in appropriate data set#
###
combined <- read.csv("traits-environment.csv", na.strings=".", header=TRUE)#
## prepare the data for JAGS#
###
## 1. pull the relevant data into columns#
###
species <- combined$species#
species#
head(combined)#
sla <- combined$SLA#
area <- combined$Leaf_area#
sd <- combined$SD#
lwr <- combined$LWratio#
spi <- combined$SPI#
map <- combined$MAP#
mat <- combined$MAT#
ratio <- combined$ratio
species
combined$source_pop
unique(combined$source_pop)
length(unique(combined$source_pop))
require(R2jags)#
require(mvtnorm)#
rm(list=ls())#
debug <- FALSE#
plot <- TRUE#
print <- TRUE#
report.DIC <- TRUE#
gamma.rate.resid <- 1.0#
gamma.shape.resid <- 1.0#
gamma.rate.species <- 1.0#
gamma.shape.species <-  1.0#
beta.par <- 6#
max.r <- 0.5#
model.file="traits-environment.txt"#
if (debug) {#
  n.chains <- 1#
  n.burnin <- 500#
  n.iter <- 1000#
  n.thin <- 1#
  ## to allow replication of results across runs in JAGS#
  ###
  set.seed(1)#
} else {#
  n.chains <- 5#
  n.burnin <- 5000#
  n.iter <- 25000#
  n.thin <- 25#
}#
standardize <- function(x) {#
  if (is.numeric(x)) {#
    y <- (x - mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
  } else {#
    y <- x#
  }#
  y#
}#
get.mean.vector <- function(x) {#
  x.mean <- apply(x, 1, mean, na.rm=TRUE)#
}#
drop.levels <- function(dat) {#
  dat[] <- lapply(dat, function(x) x[,drop=TRUE])#
  return(dat)#
}#
likelihood <- function(y, mu, Sigma) {#
  llike <- 0.0#
  for (i in 1:nrow(y)) {#
    llike <- llike + dmvnorm(y[i,], mu[i,], Sigma[,], log=TRUE)#
  }#
  llike#
}#
Dbar <- function(y, mu, Sigma) {#
  dbar <- numeric(0)#
  n.rep <- dim(mu)[1]#
  for (i in 1:n.rep) {#
    if ((i %% 10) == 0) {#
      cat(".", sep="")#
      flush.console()#
    }#
    if ((i %% 500) == 0) {#
      cat(i, "\n")#
      flush.console()#
    }#
    dbar[i] <- -2.0*likelihood(y, mu[i,,], Sigma[i,,])#
  }#
  mean(dbar)#
}#
Dhat <- function(y, mu.mean, Sigma.mean) {#
  -2.0*likelihood(y, mu.mean, Sigma.mean)#
}#
## read in appropriate data set#
###
combined <- read.csv("traits-environment.csv", na.strings=".", header=TRUE)#
## prepare the data for JAGS#
###
## 1. pull the relevant data into columns#
###
species <- combined$source_pop #combined$species#
species#
head(combined)#
sla <- combined$SLA#
area <- combined$Leaf_area#
sd <- combined$SD#
lwr <- combined$LWratio#
spi <- combined$SPI#
map <- combined$MAP#
mat <- combined$MAT#
ratio <- combined$ratio
## 3. pull the vectors back out and standardize for JAGS#
###
species <- as.numeric(combined$species)#
sla <- standardize(combined$SLA)#
area <- standardize(combined$Leaf_area)#
sd <- standardize(combined$SD)#
lwr <- standardize(combined$Lwratio)#
spi <- standardize(combined$SPI)#
map <- standardize(combined$MAP)#
mat <- standardize(combined$MAT)#
ratio <- standardize(combined$ratio)#
n.samp <- nrow(combined)#
n.species <- max(species)#
n.dim <- 5#
n.species.dim <- n.species*n.dim
n.samp <- nrow(combined)#
n.species <- max(species, na.rm=TRUE)#
n.dim <- 5#
n.species.dim <- n.species*n.dim
species
combined <- read.csv("traits-environment.csv", na.strings=".", header=TRUE)#
## prepare the data for JAGS#
###
species <- as.numeric(combined$source_pop) #as.numeric(combined$species)#
sla <- standardize(combined$SLA)#
area <- standardize(combined$Leaf_area)#
sd <- standardize(combined$SD)#
lwr <- standardize(combined$Lwratio)#
spi <- standardize(combined$SPI)#
map <- standardize(combined$MAP)#
mat <- standardize(combined$MAT)#
ratio <- standardize(combined$ratio)#
n.samp <- nrow(combined)#
n.species <- max(species, na.rm=TRUE)#
n.dim <- 5#
n.species.dim <- n.species*n.dim
n.species
debug
debug <- TRUE
debug
## construct response matrix#
###
y <- as.matrix(data.frame(sla,#
                          area,#
                          sd,#
                          lwr,#
                          spi))#
## parameters for Wishart prior#
###
## nrow = ncol = # of parameters, i.e., ncol(y) == 5#
## nu <- nrow + 2 makes it as vague as possible#
## Note: nu > nrow + 1 required for distribution to be#
##       non-degenerate#
###
Omega <- diag(x=1.0, nrow=ncol(y), ncol=ncol(y))#
nu <- nrow(Omega) + 2#
## prior precision on regression coefficients#
###
tau <- 0.1#
jags.data <- c("species",#
               "y",#
               "map",#
               "mat",#
               "ratio",#
               "n.samp",#
               "n.species",#
               "n.dim",#
               "n.species.dim",#
               "tau",#
               "gamma.rate.resid",#
               "gamma.shape.resid",#
               "gamma.rate.species",#
               "gamma.shape.species",#
               "beta.par",#
               "max.r")#
jags.par <- c("beta.map",#
               "beta.mat",#
               "beta.ratio",#
               "mu",#
               "rho.resid",#
               "Sigma.resid",#
               "rho.species",#
               "Sigma.species")
fit <- jags(data=jags.data,#
            inits=NULL,#
            parameters=jags.par,#
            model.file=model.file,#
            n.chains=n.chains,#
            n.burnin=n.burnin,#
            n.iter=n.iter,#
            n.thin=n.thin,#
            DIC=TRUE,#
            working.directory=".")
require(R2jags)#
require(mvtnorm)#
rm(list=ls())#
debug <- FALSE#
plot <- TRUE#
print <- TRUE#
report.DIC <- TRUE#
gamma.rate.resid <- 1.0#
gamma.shape.resid <- 1.0#
gamma.rate.species <- 1.0#
gamma.shape.species <-  1.0#
beta.par <- 6#
max.r <- 0.5#
model.file="traits-environment.txt"#
if (debug) {#
  n.chains <- 1#
  n.burnin <- 500#
  n.iter <- 1000#
  n.thin <- 1#
  ## to allow replication of results across runs in JAGS#
  ###
  set.seed(1)#
} else {#
  n.chains <- 5#
  n.burnin <- 5000#
  n.iter <- 25000#
  n.thin <- 25#
}#
standardize <- function(x) {#
  if (is.numeric(x)) {#
    y <- (x - mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
  } else {#
    y <- x#
  }#
  y#
}#
get.mean.vector <- function(x) {#
  x.mean <- apply(x, 1, mean, na.rm=TRUE)#
}#
drop.levels <- function(dat) {#
  dat[] <- lapply(dat, function(x) x[,drop=TRUE])#
  return(dat)#
}#
likelihood <- function(y, mu, Sigma) {#
  llike <- 0.0#
  for (i in 1:nrow(y)) {#
    llike <- llike + dmvnorm(y[i,], mu[i,], Sigma[,], log=TRUE)#
  }#
  llike#
}#
Dbar <- function(y, mu, Sigma) {#
  dbar <- numeric(0)#
  n.rep <- dim(mu)[1]#
  for (i in 1:n.rep) {#
    if ((i %% 10) == 0) {#
      cat(".", sep="")#
      flush.console()#
    }#
    if ((i %% 500) == 0) {#
      cat(i, "\n")#
      flush.console()#
    }#
    dbar[i] <- -2.0*likelihood(y, mu[i,,], Sigma[i,,])#
  }#
  mean(dbar)#
}#
Dhat <- function(y, mu.mean, Sigma.mean) {#
  -2.0*likelihood(y, mu.mean, Sigma.mean)#
}#
## read in appropriate data set#
###
combined <- read.csv("traits-environment.csv", na.strings=".", header=TRUE)#
## prepare the data for JAGS#
###
species <- as.numeric(combined$source_pop) #as.numeric(combined$species)#
sla <- standardize(combined$SLA)#
area <- standardize(combined$Leaf_area)#
sd <- standardize(combined$SD)#
lwr <- standardize(combined$Lwratio)#
spi <- standardize(combined$SPI)#
map <- standardize(combined$MAP)#
mat <- standardize(combined$MAT)#
ratio <- standardize(combined$ratio)#
n.samp <- nrow(combined)#
n.species <- max(species, na.rm=TRUE)#
n.dim <- 5#
n.species.dim <- n.species*n.dim#
## construct response matrix#
###
y <- as.matrix(data.frame(sla,#
                          area,#
                          sd,#
                          lwr,#
                          spi))
length(sla)
length(area)
length(sd)
length(lwr)
length(spi)
combined <- read.csv("traits-environment.csv", na.strings=".", header=TRUE)#
## prepare the data for JAGS#
###
species <- as.numeric(combined$source_pop) #as.numeric(combined$species)#
sla <- standardize(combined$SLA)#
area <- standardize(combined$leaf_area) #standardize(combined$Leaf_area)#
sd <- standardize(combined$stomatal_density) #standardize(combined$SD)#
lwr <- standardize(combined$LWR) #standardize(combined$Lwratio)#
spi <- standardize(combined$SPI)#
map <- standardize(combined$MAP)#
mat <- standardize(combined$MAT)#
ratio <- standardize(combined$ratio)#
n.samp <- nrow(combined)#
n.species <- max(species, na.rm=TRUE)#
n.dim <- 5#
n.species.dim <- n.species*n.dim#
## construct response matrix#
###
y <- as.matrix(data.frame(sla,#
                          area,#
                          sd,#
                          lwr,#
                          spi))
## parameters for Wishart prior#
###
## nrow = ncol = # of parameters, i.e., ncol(y) == 5#
## nu <- nrow + 2 makes it as vague as possible#
## Note: nu > nrow + 1 required for distribution to be#
##       non-degenerate#
###
Omega <- diag(x=1.0, nrow=ncol(y), ncol=ncol(y))#
nu <- nrow(Omega) + 2#
## prior precision on regression coefficients#
###
tau <- 0.1#
jags.data <- c("species",#
               "y",#
               "map",#
               "mat",#
               "ratio",#
               "n.samp",#
               "n.species",#
               "n.dim",#
               "n.species.dim",#
               "tau",#
               "gamma.rate.resid",#
               "gamma.shape.resid",#
               "gamma.rate.species",#
               "gamma.shape.species",#
               "beta.par",#
               "max.r")#
jags.par <- c("beta.map",#
               "beta.mat",#
               "beta.ratio",#
               "mu",#
               "rho.resid",#
               "Sigma.resid",#
               "rho.species",#
               "Sigma.species")
fit <- jags(data=jags.data,#
            inits=NULL,#
            parameters=jags.par,#
            model.file=model.file,#
            n.chains=n.chains,#
            n.burnin=n.burnin,#
            n.iter=n.iter,#
            n.thin=n.thin,#
            DIC=TRUE,#
            working.directory=".")
y[1,]
combined[is.na(combined$leaf_area),]
combined[is.na(combined$leaf_area),c("leaf_area","LWR","SLA","SPI","stomatal_density")]
